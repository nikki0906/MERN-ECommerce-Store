{
    "sourceFile": "backend/controllers/orderController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1747651643800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747654017042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,38 @@\n   const createdOrder = await order.save();\r\n   res.status(201).json(createdOrder);\r\n };\r\n \r\n+export const addOrderItems = async (req, res) => {\r\n+  const {\r\n+    orderItems,\r\n+    shippingAddress,\r\n+    paymentMethod,\r\n+    totalPrice,\r\n+  } = req.body;\r\n+\r\n+  if (orderItems && orderItems.length === 0) {\r\n+    res.status(400);\r\n+    throw new Error('No order items');\r\n+  } else {\r\n+    const order = new Order({\r\n+      user: req.user._id,\r\n+      orderItems,\r\n+      shippingAddress,\r\n+      paymentMethod,\r\n+      totalPrice,\r\n+    });\r\n+\r\n+    const createdOrder = await order.save();\r\n+    res.status(201).json(createdOrder);\r\n+  }\r\n+};\r\n+\r\n+export const getMyOrders = async (req, res) => {\r\n+  const orders = await Order.find({ user: req.user._id });\r\n+  res.json(orders);\r\n+};\r\n+\r\n export const getUserOrders = async (req, res) => {\r\n   try {\r\n     const orders = await Order.find({ user: req.user.id });\r\n     res.json(orders);\r\n"
                },
                {
                    "date": 1747655169301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,95 @@\n-// controllers/orderController.js\r\n import Order from '../models/orderModel.js';\r\n+import asyncHandler from 'express-async-handler';\r\n+import Razorpay from 'razorpay';\r\n+import dotenv from 'dotenv';\r\n+dotenv.config();\r\n \r\n-export const createOrder = async (req, res) => {\r\n+// ✅ Razorpay instance\r\n+const razorpay = new Razorpay({\r\n+  key_id: process.env.RAZORPAY_KEY_ID,\r\n+  key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n+});\r\n+\r\n+// ===========================================\r\n+// 🚀 1️⃣ Add Order Items\r\n+// ===========================================\r\n+export const addOrderItems = asyncHandler(async (req, res) => {\r\n   const { orderItems, shippingAddress, paymentMethod, totalPrice } = req.body;\r\n \r\n-  if (!orderItems || orderItems.length === 0) {\r\n-    return res.status(400).json({ message: 'No order items' });\r\n-  }\r\n-\r\n-  const order = new Order({\r\n-    user: req.user._id,\r\n-    orderItems,\r\n-    shippingAddress,\r\n-    paymentMethod,\r\n-    totalPrice,\r\n-  });\r\n-\r\n-  const createdOrder = await order.save();\r\n-  res.status(201).json(createdOrder);\r\n-};\r\n-\r\n-export const addOrderItems = async (req, res) => {\r\n-  const {\r\n-    orderItems,\r\n-    shippingAddress,\r\n-    paymentMethod,\r\n-    totalPrice,\r\n-  } = req.body;\r\n-\r\n   if (orderItems && orderItems.length === 0) {\r\n     res.status(400);\r\n     throw new Error('No order items');\r\n   } else {\r\n     const order = new Order({\r\n+      orderItems,\r\n       user: req.user._id,\r\n-      orderItems,\r\n       shippingAddress,\r\n       paymentMethod,\r\n       totalPrice,\r\n     });\r\n \r\n     const createdOrder = await order.save();\r\n     res.status(201).json(createdOrder);\r\n   }\r\n-};\r\n+});\r\n \r\n-export const getMyOrders = async (req, res) => {\r\n-  const orders = await Order.find({ user: req.user._id });\r\n+// ===========================================\r\n+// 🚀 2️⃣ Get My Orders\r\n+// ===========================================\r\n+export const getMyOrders = asyncHandler(async (req, res) => {\r\n+  const orders = await Order.find({ user: req.user._id }).sort({ createdAt: -1 });\r\n   res.json(orders);\r\n-};\r\n+});\r\n \r\n-export const getUserOrders = async (req, res) => {\r\n-  try {\r\n-    const orders = await Order.find({ user: req.user.id });\r\n-    res.json(orders);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: 'Server Error' });\r\n-  }\r\n-};\r\n+// ===========================================\r\n+// 🚀 3️⃣ Update Order to Paid (After Razorpay Payment)\r\n+// ===========================================\r\n+export const updateOrderToPaid = asyncHandler(async (req, res) => {\r\n+  const order = await Order.findById(req.params.id);\r\n \r\n-export const getOrderById = async (req, res) => {\r\n-  try {\r\n-    const order = await Order.findById(req.params.id).populate('user', 'name email');\r\n-    if (order) {\r\n-      res.json(order);\r\n-    } else {\r\n-      res.status(404).json({ message: 'Order not found' });\r\n-    }\r\n\\ No newline at end of file\n-  } catch (error) {\r\n-    res.status(500).json({ message: 'Server Error' });\r\n+  if (order) {\r\n+    order.isPaid = true;\r\n+    order.paidAt = Date.now();\r\n+    order.paymentResult = {\r\n+      id: req.body.paymentResult.razorpay_payment_id,\r\n+      status: 'Completed',\r\n+      update_time: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const updatedOrder = await order.save();\r\n+    res.json(updatedOrder);\r\n+  } else {\r\n+    res.status(404);\r\n+    throw new Error('Order not found');\r\n   }\r\n-};\r\n+});\r\n \r\n-export const updateOrderToPaid = async (req, res) => {\r\n-  try {\r\n-    const order = await Order.findById(req.params.id);\r\n-    if (order) {\r\n-      order.isPaid = true;\r\n-      order.paidAt = Date.now();\r\n-      order.paymentResult = {\r\n-        id: req.body.id,\r\n-        status: req.body.status,\r\n-        update_time: req.body.update_time,\r\n-        email_address: req.body.email_address,\r\n-      };\r\n+// ===========================================\r\n+// 🚀 4️⃣ Razorpay Webhook Handler\r\n+// ===========================================\r\n+export const razorpayWebhook = asyncHandler(async (req, res) => {\r\n+  const { payload } = req.body;\r\n \r\n-      const updatedOrder = await order.save();\r\n-      res.json(updatedOrder);\r\n-    } else {\r\n-      res.status(404).json({ message: 'Order not found' });\r\n+  if (payload && payload.payment) {\r\n+    const payment = payload.payment.entity;\r\n+\r\n+    if (payment.status === 'captured') {\r\n+      const orderId = payment.notes.order_id;  // This is the order_id we saved during Razorpay order creation\r\n+      const order = await Order.findById(orderId);\r\n+\r\n+      if (order) {\r\n+        order.isPaid = true;\r\n+        order.paidAt = Date.now();\r\n+        order.paymentResult = {\r\n+          id: payment.id,\r\n+          status: 'Completed',\r\n+          update_time: new Date().toISOString(),\r\n+        };\r\n+\r\n+        await order.save();\r\n+        console.log(`Order ${orderId} marked as paid!`);\r\n+      }\r\n     }\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: 'Server Error' });\r\n   }\r\n-};\n+  res.status(200).json({ status: 'ok' });\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747721740747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+import Order from '../models/orderModel.js';\r\n+import asyncHandler from 'express-async-handler';\r\n+import Razorpay from 'razorpay';\r\n+import dotenv from 'dotenv';\r\n+dotenv.config();\r\n+\r\n+// ✅ Razorpay instance\r\n+const razorpay = new Razorpay({\r\n+  key_id: process.env.RAZORPAY_KEY_ID,\r\n+  key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n+});\r\n+\r\n+// ===========================================\r\n+// 🚀 1️⃣ Add Order Items\r\n+// ===========================================\r\n+export const addOrderItems = asyncHandler(async (req, res) => {\r\n+  const { orderItems, shippingAddress, paymentMethod, totalPrice } = req.body;\r\n+\r\n+  if (orderItems && orderItems.length === 0) {\r\n+    res.status(400);\r\n+    throw new Error('No order items');\r\n+  } else {\r\n+    const order = new Order({\r\n+      orderItems,\r\n+      user: req.user._id,\r\n+      shippingAddress,\r\n+      paymentMethod,\r\n+      totalPrice,\r\n+    });\r\n+\r\n+    const createdOrder = await order.save();\r\n+    res.status(201).json(createdOrder);\r\n+  }\r\n+});\r\n+\r\n+// ===========================================\r\n+// 🚀 2️⃣ Get My Orders\r\n+// ===========================================\r\n+export const getMyOrders = asyncHandler(async (req, res) => {\r\n+  const orders = await Order.find({ user: req.user._id }).sort({ createdAt: -1 });\r\n+  res.json(orders);\r\n+});\r\n+\r\n+// ===========================================\r\n+// 🚀 3️⃣ Update Order to Paid (After Razorpay Payment)\r\n+// ===========================================\r\n+export const updateOrderToPaid = asyncHandler(async (req, res) => {\r\n+  const order = await Order.findById(req.params.id);\r\n+\r\n+  if (order) {\r\n+    order.isPaid = true;\r\n+    order.paidAt = Date.now();\r\n+    order.paymentResult = {\r\n+      id: req.body.paymentResult.razorpay_payment_id,\r\n+      status: 'Completed',\r\n+      update_time: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const updatedOrder = await order.save();\r\n+    res.json(updatedOrder);\r\n+  } else {\r\n+    res.status(404);\r\n+    throw new Error('Order not found');\r\n+  }\r\n+});\r\n+\r\n+// ===========================================\r\n+// 🚀 4️⃣ Razorpay Webhook Handler\r\n+// ===========================================\r\n+export const razorpayWebhook = asyncHandler(async (req, res) => {\r\n+  const { payload } = req.body;\r\n+\r\n+  if (payload && payload.payment) {\r\n+    const payment = payload.payment.entity;\r\n+\r\n+    if (payment.status === 'captured') {\r\n+      const orderId = payment.notes.order_id;  // This is the order_id we saved during Razorpay order creation\r\n+      const order = await Order.findById(orderId);\r\n+\r\n+      if (order) {\r\n+        order.isPaid = true;\r\n+        order.paidAt = Date.now();\r\n+        order.paymentResult = {\r\n+          id: payment.id,\r\n+          status: 'Completed',\r\n+          update_time: new Date().toISOString(),\r\n+        };\r\n+\r\n+        await order.save();\r\n+        console.log(`Order ${orderId} marked as paid!`);\r\n+      }\r\n+    }\r\n+  }\r\n+  res.status(200).json({ status: 'ok' });\r\n+});\r\n+\r\n+// ==============================================\r\n+// 🚀\r\n+// ==============================================\r\n+export const handleWebhook = async (req, res) => {\r\n+  const { event, payload } = req.body;\r\n+\r\n+  if (event === \"payment.captured\") {\r\n+    const paymentData = payload.payment.entity;\r\n+\r\n+    // Save this data in your Order model\r\n+    const newOrder = new Order({\r\n+      userId: paymentData.notes.userId, // assuming you passed userId in notes\r\n+      amount: paymentData.amount / 100,\r\n+      paymentId: paymentData.id,\r\n+      status: paymentData.status,\r\n+      currency: paymentData.currency,\r\n+      method: paymentData.method,\r\n+      receipt: paymentData.receipt,\r\n+      createdAt: paymentData.created_at,\r\n+    });\r\n+\r\n+    await newOrder.save();\r\n+  }\r\n+\r\n+  res.status(200).json({ success: true });\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747721758739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,100 +118,5 @@\n     await newOrder.save();\r\n   }\r\n \r\n   res.status(200).json({ success: true });\r\n-};\n-import Order from '../models/orderModel.js';\r\n-import asyncHandler from 'express-async-handler';\r\n-import Razorpay from 'razorpay';\r\n-import dotenv from 'dotenv';\r\n-dotenv.config();\r\n-\r\n-// ✅ Razorpay instance\r\n-const razorpay = new Razorpay({\r\n-  key_id: process.env.RAZORPAY_KEY_ID,\r\n-  key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n-});\r\n-\r\n-// ===========================================\r\n-// 🚀 1️⃣ Add Order Items\r\n-// ===========================================\r\n-export const addOrderItems = asyncHandler(async (req, res) => {\r\n-  const { orderItems, shippingAddress, paymentMethod, totalPrice } = req.body;\r\n-\r\n-  if (orderItems && orderItems.length === 0) {\r\n-    res.status(400);\r\n-    throw new Error('No order items');\r\n-  } else {\r\n-    const order = new Order({\r\n-      orderItems,\r\n-      user: req.user._id,\r\n-      shippingAddress,\r\n-      paymentMethod,\r\n-      totalPrice,\r\n-    });\r\n-\r\n-    const createdOrder = await order.save();\r\n-    res.status(201).json(createdOrder);\r\n-  }\r\n-});\r\n-\r\n-// ===========================================\r\n-// 🚀 2️⃣ Get My Orders\r\n-// ===========================================\r\n-export const getMyOrders = asyncHandler(async (req, res) => {\r\n-  const orders = await Order.find({ user: req.user._id }).sort({ createdAt: -1 });\r\n-  res.json(orders);\r\n-});\r\n-\r\n-// ===========================================\r\n-// 🚀 3️⃣ Update Order to Paid (After Razorpay Payment)\r\n-// ===========================================\r\n-export const updateOrderToPaid = asyncHandler(async (req, res) => {\r\n-  const order = await Order.findById(req.params.id);\r\n-\r\n-  if (order) {\r\n-    order.isPaid = true;\r\n-    order.paidAt = Date.now();\r\n-    order.paymentResult = {\r\n-      id: req.body.paymentResult.razorpay_payment_id,\r\n-      status: 'Completed',\r\n-      update_time: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const updatedOrder = await order.save();\r\n-    res.json(updatedOrder);\r\n-  } else {\r\n-    res.status(404);\r\n-    throw new Error('Order not found');\r\n-  }\r\n-});\r\n-\r\n-// ===========================================\r\n-// 🚀 4️⃣ Razorpay Webhook Handler\r\n-// ===========================================\r\n-export const razorpayWebhook = asyncHandler(async (req, res) => {\r\n-  const { payload } = req.body;\r\n-\r\n-  if (payload && payload.payment) {\r\n-    const payment = payload.payment.entity;\r\n-\r\n-    if (payment.status === 'captured') {\r\n-      const orderId = payment.notes.order_id;  // This is the order_id we saved during Razorpay order creation\r\n-      const order = await Order.findById(orderId);\r\n-\r\n-      if (order) {\r\n-        order.isPaid = true;\r\n-        order.paidAt = Date.now();\r\n-        order.paymentResult = {\r\n-          id: payment.id,\r\n-          status: 'Completed',\r\n-          update_time: new Date().toISOString(),\r\n-        };\r\n-\r\n-        await order.save();\r\n-        console.log(`Order ${orderId} marked as paid!`);\r\n-      }\r\n-    }\r\n-  }\r\n-  res.status(200).json({ status: 'ok' });\r\n-});\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747722545415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n   res.status(200).json({ status: 'ok' });\r\n });\r\n \r\n // ==============================================\r\n-// 🚀\r\n+// 🚀 Handle WebHook\r\n // ==============================================\r\n export const handleWebhook = async (req, res) => {\r\n   const { event, payload } = req.body;\r\n \r\n@@ -118,5 +118,15 @@\n     await newOrder.save();\r\n   }\r\n \r\n   res.status(200).json({ success: true });\r\n+};\r\n+\r\n+// ==============================================\r\n+// 🚀 get user orders\r\n+// ==============================================\r\n+\r\n+export const getUserOrders = async (req, res) => {\r\n+  const userId = req.user._id;\r\n+  const orders = await Order.find({ userId }).sort({ createdAt: -1 });\r\n+  res.json(orders);\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747724912283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,5 +128,18 @@\n export const getUserOrders = async (req, res) => {\r\n   const userId = req.user._id;\r\n   const orders = await Order.find({ userId }).sort({ createdAt: -1 });\r\n   res.json(orders);\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+// ==============================================\r\n+// 🚀 get all orders \r\n+// ==============================================\r\n+\r\n+// GET /api/orders/all\r\n+export const getAllOrders = asyncHandler(async (req, res) => {\r\n+  const orders = await Order.find({})\r\n+    .populate('user', 'name email') // Get user name and email\r\n+    .sort({ createdAt: -1 });\r\n+\r\n+  res.json(orders);\r\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747651643800,
            "name": "Commit-0",
            "content": "// controllers/orderController.js\r\nimport Order from '../models/orderModel.js';\r\n\r\nexport const createOrder = async (req, res) => {\r\n  const { orderItems, shippingAddress, paymentMethod, totalPrice } = req.body;\r\n\r\n  if (!orderItems || orderItems.length === 0) {\r\n    return res.status(400).json({ message: 'No order items' });\r\n  }\r\n\r\n  const order = new Order({\r\n    user: req.user._id,\r\n    orderItems,\r\n    shippingAddress,\r\n    paymentMethod,\r\n    totalPrice,\r\n  });\r\n\r\n  const createdOrder = await order.save();\r\n  res.status(201).json(createdOrder);\r\n};\r\n\r\nexport const getUserOrders = async (req, res) => {\r\n  try {\r\n    const orders = await Order.find({ user: req.user.id });\r\n    res.json(orders);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\nexport const getOrderById = async (req, res) => {\r\n  try {\r\n    const order = await Order.findById(req.params.id).populate('user', 'name email');\r\n    if (order) {\r\n      res.json(order);\r\n    } else {\r\n      res.status(404).json({ message: 'Order not found' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\nexport const updateOrderToPaid = async (req, res) => {\r\n  try {\r\n    const order = await Order.findById(req.params.id);\r\n    if (order) {\r\n      order.isPaid = true;\r\n      order.paidAt = Date.now();\r\n      order.paymentResult = {\r\n        id: req.body.id,\r\n        status: req.body.status,\r\n        update_time: req.body.update_time,\r\n        email_address: req.body.email_address,\r\n      };\r\n\r\n      const updatedOrder = await order.save();\r\n      res.json(updatedOrder);\r\n    } else {\r\n      res.status(404).json({ message: 'Order not found' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"
        }
    ]
}
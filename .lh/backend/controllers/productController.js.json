{
    "sourceFile": "backend/controllers/productController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747296226138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747305246806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n // controllers/productController.js\r\n import Product from '../models/productModel.js';\r\n+import User from '../models/userModel.js';\r\n+import Order from '../models/orderModel.js';\r\n+import { io } from '../server.js'; // Import the instance of socket\r\n \r\n // GET all products\r\n export const getAllProducts = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1747305576778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n import Product from '../models/productModel.js';\r\n import User from '../models/userModel.js';\r\n import Order from '../models/orderModel.js';\r\n import { io } from '../server.js'; // Import the instance of socket\r\n+import dotenv from 'dotenv';\r\n+dotenv.config();\r\n \r\n // GET all products\r\n export const getAllProducts = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1747307954404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,5 +83,16 @@\n     res.json(product);\r\n   } catch (err) {\r\n     res.status(500).json({ message: err.message });\r\n   }\r\n+};\r\n+\r\n+// In your controller or route file (productController.js)\r\n+export const restoreProduct = async (req, res) => {\r\n+  const { id } = req.params;\r\n+  try {\r\n+    await Product.findByIdAndUpdate(id, { isDeleted: false });\r\n+    res.status(200).json({ message: 'Product restored successfully.' });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: 'Error restoring product', error });\r\n+  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747309038994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,6 @@\n // controllers/productController.js\r\n import Product from '../models/productModel.js';\r\n-import User from '../models/userModel.js';\r\n-import Order from '../models/orderModel.js';\r\n-import { io } from '../server.js'; // Import the instance of socket\r\n import dotenv from 'dotenv';\r\n dotenv.config();\r\n \r\n // GET all products\r\n"
                }
            ],
            "date": 1747296226138,
            "name": "Commit-0",
            "content": "// controllers/productController.js\r\nimport Product from '../models/productModel.js';\r\n\r\n// GET all products\r\nexport const getAllProducts = async (req, res) => {\r\n  try {\r\n    const products = await Product.find();\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).json({ message: 'Error fetching products' });\r\n  }\r\n};\r\n\r\n// ADD new product (Fixed)\r\nexport const addProduct = async (req, res) => {\r\n  try {\r\n    const { name, brand, category, image, price, countInStock, description } = req.body;\r\n\r\n    // ✅ Validate required fields\r\n    if (!name || !brand || !category || !image || !price || !countInStock || !description) {\r\n      return res.status(400).json({ message: 'All fields are required.' });\r\n    }\r\n\r\n    const newProduct = new Product({\r\n      name,\r\n      brand,\r\n      category,\r\n      image,\r\n      price,\r\n      countInStock,\r\n      description\r\n    });\r\n\r\n    const savedProduct = await newProduct.save();\r\n    res.status(201).json(savedProduct);  // ✅ Respond only once after saving\r\n\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// UPDATE product\r\nexport const updateProduct = async (req, res) => {\r\n  try {\r\n    const { name, description, price, image } = req.body;\r\n\r\n    const product = await Product.findById(req.params.id);\r\n    if (!product) return res.status(404).json({ message: 'Product not found' });\r\n\r\n    product.name = name || product.name;\r\n    product.description = description || product.description;\r\n    product.price = price || product.price;\r\n    product.image = image || product.image;\r\n\r\n    const updated = await product.save();\r\n    res.status(200).json(updated);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\n\r\n// DELETE product\r\nexport const deleteProduct = async (req, res) => {\r\n  try {\r\n    await Product.findByIdAndDelete(req.params.id);\r\n    res.json({ message: 'Product deleted' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get a product by ID\r\nexport const getProductById = async (req, res) => {\r\n  try {\r\n    const product = await Product.findById(req.params.id);\r\n    if (!product) return res.status(404).json({ message: 'Product not found' });\r\n    res.json(product);\r\n  } catch (err) {\r\n    res.status(500).json({ message: err.message });\r\n  }\r\n};"
        }
    ]
}
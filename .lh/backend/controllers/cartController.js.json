{
    "sourceFile": "backend/controllers/cartController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747306510216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747306510216,
            "name": "Commit-0",
            "content": "import Cart from \"../models/CartModel.js\";\r\n\r\n// Add to Cart\r\nexport const addToCart = async (req, res) => {\r\n  const { productId, quantity } = req.body;\r\n  const userId = req.user._id;\r\n\r\n  if (!productId || !quantity) {\r\n    return res.status(400).json({ message: \"Product ID and quantity are required.\" });\r\n  }\r\n\r\n  try {\r\n    const { productId } = req.body;\r\n    const newCartItem = new Cart({ product: productId, quantity: 1 });\r\n    await newCartItem.save();\r\n    res.status(201).json({ message: 'Product added to cart', newCartItem });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Failed to add product to cart', error });\r\n  }\r\n\r\n  try {\r\n    let cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      cart = new Cart({ userId, items: [] });\r\n    }\r\n\r\n    const existingItem = cart.items.find(item => item.productId.toString() === productId);\r\n\r\n    if (existingItem) {\r\n      existingItem.quantity += quantity;\r\n    } else {\r\n      cart.items.push({ productId, quantity });\r\n    }\r\n\r\n    await cart.save();\r\n    res.status(200).json({ message: \"Item added to cart\", cart });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error });\r\n  }\r\n};\r\n\r\n// Get Cart Items\r\nexport const getCart = async (req, res) => {\r\n  try {\r\n    const cart = await Cart.findOne({ userId: req.user._id }).populate(\"items.productId\");\r\n\r\n    if (!cart || cart.items.length === 0) {\r\n      return res.status(200).json({ message: \"Cart is empty\", cart: [] });\r\n    }\r\n\r\n    res.status(200).json({ cart });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error });\r\n  }\r\n};\r\n\r\n// Update Item Quantity\r\nexport const updateCartItem = async (req, res) => {\r\n  const { productId, quantity } = req.body;\r\n\r\n  if (!productId || quantity === undefined) {\r\n    return res.status(400).json({ message: \"Product ID and new quantity required\" });\r\n  }\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ userId: req.user._id });\r\n\r\n    if (!cart) return res.status(404).json({ message: \"Cart not found\" });\r\n\r\n    const item = cart.items.find(item => item.productId.toString() === productId);\r\n\r\n    if (!item) return res.status(404).json({ message: \"Item not in cart\" });\r\n\r\n    item.quantity = quantity;\r\n    await cart.save();\r\n\r\n    res.status(200).json({ message: \"Cart updated\", cart });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error });\r\n  }\r\n};\r\n\r\n// Remove from Cart\r\nexport const removeFromCart = async (req, res) => {\r\n  const { productId } = req.params;\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ userId: req.user._id });\r\n\r\n    if (!cart) return res.status(404).json({ message: \"Cart not found\" });\r\n\r\n    cart.items = cart.items.filter(item => item.productId.toString() !== productId);\r\n    await cart.save();\r\n\r\n    res.status(200).json({ message: \"Item removed from cart\", cart });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error });\r\n  }\r\n};\r\n\r\n// Clear Cart\r\nexport const clearCart = async (req, res) => {\r\n  try {\r\n    const cart = await Cart.findOne({ userId: req.user._id });\r\n\r\n    if (!cart) return res.status(404).json({ message: \"Cart not found\" });\r\n\r\n    cart.items = [];\r\n    await cart.save();\r\n\r\n    res.status(200).json({ message: \"Cart cleared\", cart });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error });\r\n  }\r\n};"
        }
    ]
}
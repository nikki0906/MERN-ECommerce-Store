{
    "sourceFile": "frontend/src/pages/CartPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1747735064335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747735757843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useEffect, useState } from 'react';\r\n import './CartPage.css';\r\n import { useCart } from '../context/CartContext';\r\n+import axios from 'axios';\r\n \r\n const CartPage = () => {\r\n   const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n   const [totalPrice, setTotalPrice] = useState(0);\r\n@@ -12,8 +13,51 @@\n       setTotalPrice(price);\r\n     }\r\n   }, [cartItems]);\r\n \r\n+  const handleCheckout = async () => {\r\n+    try {\r\n+      const token = localStorage.getItem('token'); // assuming you're storing JWT\r\n+\r\n+      const { data: order } = await axios.post(\r\n+        '/api/payments/order',\r\n+        { amount: totalPrice },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      const options = {\r\n+        key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Set in .env\r\n+        amount: order.amount,\r\n+        currency: 'INR',\r\n+        name: 'My Store',\r\n+        description: 'Test Transaction',\r\n+        order_id: order.id,\r\n+        handler: function (response) {\r\n+          alert('Payment successful!');\r\n+          clearCart(); // optional\r\n+        },\r\n+        prefill: {\r\n+          name: 'Nikita Tiwari',\r\n+          email: 'nikita@example.com',\r\n+          contact: '9999999999',\r\n+        },\r\n+        theme: {\r\n+          color: '#3399cc',\r\n+        },\r\n+      };\r\n+\r\n+      const rzp = new window.Razorpay(options);\r\n+      rzp.open();\r\n+    } catch (err) {\r\n+      console.error('Checkout Error:', err);\r\n+      alert('Something went wrong');\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"cartPage\">\r\n       <div className=\"cartPage__left\">\r\n         <h2>Your Shopping Cart</h2>\r\n@@ -40,9 +84,9 @@\n         <div className=\"cartPage__summary\">\r\n           <h3>Price Summary</h3>\r\n           <p>Total Price: ₹{totalPrice}</p>\r\n           <button onClick={clearCart}>Clear Cart</button>\r\n-          <button>Proceed to Checkout</button>\r\n+          <button onClick={handleCheckout}>Proceed to Checkout</button>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1747736699768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,46 +15,49 @@\n   }, [cartItems]);\r\n \r\n   const handleCheckout = async () => {\r\n     try {\r\n-      const token = localStorage.getItem('token'); // assuming you're storing JWT\r\n-\r\n+      // 1. Call backend to create Razorpay order\r\n       const { data: order } = await axios.post(\r\n-        '/api/payments/order',\r\n+        'http://localhost:5000/api/payments/order',\r\n         { amount: totalPrice },\r\n         {\r\n           headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n+            Authorization: `Bearer ${localStorage.getItem('token')}`, // Your JWT token\r\n           },\r\n         }\r\n       );\r\n \r\n+      // 2. Configure Razorpay options\r\n       const options = {\r\n-        key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Set in .env\r\n+        key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Razorpay public key\r\n         amount: order.amount,\r\n-        currency: 'INR',\r\n-        name: 'My Store',\r\n-        description: 'Test Transaction',\r\n+        currency: order.currency,\r\n+        name: 'Nikita Store',\r\n+        description: 'Order Payment',\r\n         order_id: order.id,\r\n         handler: function (response) {\r\n-          alert('Payment successful!');\r\n-          clearCart(); // optional\r\n+          alert('Payment Successful');\r\n+          console.log('Payment success:', response);\r\n+          clearCart();\r\n         },\r\n         prefill: {\r\n           name: 'Nikita Tiwari',\r\n           email: 'nikita@example.com',\r\n-          contact: '9999999999',\r\n+          contact: '9876543210',\r\n         },\r\n         theme: {\r\n           color: '#3399cc',\r\n         },\r\n       };\r\n \r\n-      const rzp = new window.Razorpay(options);\r\n-      rzp.open();\r\n+      // 3. Open Razorpay popup\r\n+      const razor = new window.Razorpay(options);\r\n+      razor.open();\r\n+\r\n     } catch (err) {\r\n-      console.error('Checkout Error:', err);\r\n-      alert('Something went wrong');\r\n+      console.error('Payment Error:', err);\r\n+      alert('Payment failed or could not be initialized.');\r\n     }\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1747737683364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,50 +14,51 @@\n     }\r\n   }, [cartItems]);\r\n \r\n   const handleCheckout = async () => {\r\n+    const token = localStorage.getItem('token'); // ✅ Get saved token\r\n+\r\n     try {\r\n-      // 1. Call backend to create Razorpay order\r\n-      const { data: order } = await axios.post(\r\n+      const response = await axios.post(\r\n         'http://localhost:5000/api/payments/order',\r\n-        { amount: totalPrice },\r\n         {\r\n+          amount: totalPrice, // ₹ amount\r\n+        },\r\n+        {\r\n           headers: {\r\n-            Authorization: `Bearer ${localStorage.getItem('token')}`, // Your JWT token\r\n+            Authorization: `Bearer ${token}`, // ✅ Send token in header\r\n           },\r\n         }\r\n       );\r\n \r\n-      // 2. Configure Razorpay options\r\n+      const order = response.data;\r\n+\r\n       const options = {\r\n-        key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Razorpay public key\r\n+        key: 'rzp_test_HoJv5rxW53AMqA', // ✅ Your Razorpay key_id\r\n         amount: order.amount,\r\n         currency: order.currency,\r\n-        name: 'Nikita Store',\r\n-        description: 'Order Payment',\r\n+        name: 'Your Store',\r\n+        description: 'Payment for your cart items',\r\n         order_id: order.id,\r\n         handler: function (response) {\r\n-          alert('Payment Successful');\r\n-          console.log('Payment success:', response);\r\n+          alert('Payment successful!');\r\n           clearCart();\r\n         },\r\n         prefill: {\r\n           name: 'Nikita Tiwari',\r\n           email: 'nikita@example.com',\r\n-          contact: '9876543210',\r\n+          contact: '9999999999',\r\n         },\r\n         theme: {\r\n           color: '#3399cc',\r\n         },\r\n       };\r\n \r\n-      // 3. Open Razorpay popup\r\n-      const razor = new window.Razorpay(options);\r\n-      razor.open();\r\n-\r\n-    } catch (err) {\r\n-      console.error('Payment Error:', err);\r\n-      alert('Payment failed or could not be initialized.');\r\n+      const rzp = new window.Razorpay(options);\r\n+      rzp.open();\r\n+    } catch (error) {\r\n+      console.error('Checkout failed:', error);\r\n+      alert('Payment failed!');\r\n     }\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1747738841050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n         }\r\n       );\r\n \r\n       const order = response.data;\r\n+      console.log('Razorpay order received:', order);  // <== Add this to debug\r\n \r\n       const options = {\r\n         key: 'rzp_test_HoJv5rxW53AMqA', // ✅ Your Razorpay key_id\r\n         amount: order.amount,\r\n"
                },
                {
                    "date": 1747740676537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,18 +69,18 @@\n         {cartItems.length === 0 ? (\r\n           <p>Your cart is empty</p>\r\n         ) : (\r\n           cartItems.map((item) => (\r\n-            <div className=\"cartPage__product\" key={item.id}>\r\n+            <div className=\"cartPage__product\" key={item._id}>\r\n               <img src={item.image} alt={item.name} className=\"cartPage__productImage\" />\r\n               <div className=\"cartPage__productInfo\">\r\n                 <h3>{item.name}</h3>\r\n                 <p>₹{item.price}</p>\r\n                 <div className=\"cartPage__productQuantity\">\r\n                   <label>Quantity:</label>\r\n                   <input type=\"number\" value={item.count} readOnly />\r\n                 </div>\r\n-                <button onClick={() => removeFromCart(item.id)}>Remove</button>\r\n+                <button onClick={() => removeFromCart(item._id)}>Remove</button>\r\n               </div>\r\n             </div>\r\n           ))\r\n         )}\r\n"
                },
                {
                    "date": 1748238248787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,17 @@\n   const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n   const [totalPrice, setTotalPrice] = useState(0);\r\n \r\n   useEffect(() => {\r\n-    if (Array.isArray(cartItems)) {\r\n-      const price = cartItems.reduce((acc, item) => acc + item.price * item.count, 0);\r\n-      setTotalPrice(price);\r\n-    }\r\n-  }, [cartItems]);\r\n+  if (Array.isArray(cartItems)) {\r\n+    const price = cartItems.reduce((acc, item) => {\r\n+      const itemPrice = Number(item.price) || 0;\r\n+      const itemCount = Number(item.count) || 1; // fallback count = 1\r\n+      return acc + itemPrice * itemCount;\r\n+    }, 0);\r\n+    setTotalPrice(price);\r\n+  }\r\n+}, [cartItems]);\r\n \r\n   const handleCheckout = async () => {\r\n     const token = localStorage.getItem('token'); // ✅ Get saved token\r\n \r\n@@ -61,9 +65,9 @@\n       alert('Payment failed!');\r\n     }\r\n   };\r\n \r\n-  return (\r\n+  return ( \r\n     <div className=\"cartPage\">\r\n       <div className=\"cartPage__left\">\r\n         <h2>Your Shopping Cart</h2>\r\n         {cartItems.length === 0 ? (\r\n"
                },
                {
                    "date": 1748244791395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,13 @@\n   const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n   const [totalPrice, setTotalPrice] = useState(0);\r\n \r\n   useEffect(() => {\r\n-  if (Array.isArray(cartItems)) {\r\n-    const price = cartItems.reduce((acc, item) => {\r\n-      const itemPrice = Number(item.price) || 0;\r\n-      const itemCount = Number(item.count) || 1; // fallback count = 1\r\n-      return acc + itemPrice * itemCount;\r\n-    }, 0);\r\n-    setTotalPrice(price);\r\n-  }\r\n-}, [cartItems]);\r\n+    if (Array.isArray(cartItems)) {\r\n+      const price = cartItems.reduce((acc, item) => acc + item.price * item.count, 0);\r\n+      setTotalPrice(price);\r\n+    }\r\n+  }, [cartItems]);\r\n \r\n   const handleCheckout = async () => {\r\n     const token = localStorage.getItem('token'); // ✅ Get saved token\r\n \r\n@@ -65,9 +61,9 @@\n       alert('Payment failed!');\r\n     }\r\n   };\r\n \r\n-  return ( \r\n+  return (\r\n     <div className=\"cartPage\">\r\n       <div className=\"cartPage__left\">\r\n         <h2>Your Shopping Cart</h2>\r\n         {cartItems.length === 0 ? (\r\n"
                },
                {
                    "date": 1748245090503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,17 @@\n   const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n   const [totalPrice, setTotalPrice] = useState(0);\r\n \r\n   useEffect(() => {\r\n-    if (Array.isArray(cartItems)) {\r\n-      const price = cartItems.reduce((acc, item) => acc + item.price * item.count, 0);\r\n-      setTotalPrice(price);\r\n-    }\r\n-  }, [cartItems]);\r\n+  if (Array.isArray(cartItems)) {\r\n+    const price = cartItems.reduce((acc, item) => {\r\n+      const itemPrice = Number(item.price) || 0;\r\n+      const itemCount = Number(item.count) || 1; // fallback count = 1\r\n+      return acc + itemPrice * itemCount;\r\n+    }, 0);\r\n+    setTotalPrice(price);\r\n+  }\r\n+}, [cartItems]);\r\n \r\n   const handleCheckout = async () => {\r\n     const token = localStorage.getItem('token'); // ✅ Get saved token\r\n \r\n@@ -61,9 +65,9 @@\n       alert('Payment failed!');\r\n     }\r\n   };\r\n \r\n-  return (\r\n+  return ( \r\n     <div className=\"cartPage\">\r\n       <div className=\"cartPage__left\">\r\n         <h2>Your Shopping Cart</h2>\r\n         {cartItems.length === 0 ? (\r\n"
                },
                {
                    "date": 1748245954865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,12 @@\n \r\n const CartPage = () => {\r\n   const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n   const [totalPrice, setTotalPrice] = useState(0);\r\n-\r\n+  \r\n   useEffect(() => {\r\n-  if (Array.isArray(cartItems)) {\r\n-    const price = cartItems.reduce((acc, item) => {\r\n+    if (Array.isArray(cartItems)) {\r\n+      const price = cartItems.reduce((acc, item) => {\r\n       const itemPrice = Number(item.price) || 0;\r\n       const itemCount = Number(item.count) || 1; // fallback count = 1\r\n       return acc + itemPrice * itemCount;\r\n     }, 0);\r\n@@ -65,9 +65,9 @@\n       alert('Payment failed!');\r\n     }\r\n   };\r\n \r\n-  return ( \r\n+  return (\r\n     <div className=\"cartPage\">\r\n       <div className=\"cartPage__left\">\r\n         <h2>Your Shopping Cart</h2>\r\n         {cartItems.length === 0 ? (\r\n"
                }
            ],
            "date": 1747735064335,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport './CartPage.css';\r\nimport { useCart } from '../context/CartContext';\r\n\r\nconst CartPage = () => {\r\n  const { cartItems = [], removeFromCart, clearCart } = useCart();\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(cartItems)) {\r\n      const price = cartItems.reduce((acc, item) => acc + item.price * item.count, 0);\r\n      setTotalPrice(price);\r\n    }\r\n  }, [cartItems]);\r\n\r\n  return (\r\n    <div className=\"cartPage\">\r\n      <div className=\"cartPage__left\">\r\n        <h2>Your Shopping Cart</h2>\r\n        {cartItems.length === 0 ? (\r\n          <p>Your cart is empty</p>\r\n        ) : (\r\n          cartItems.map((item) => (\r\n            <div className=\"cartPage__product\" key={item.id}>\r\n              <img src={item.image} alt={item.name} className=\"cartPage__productImage\" />\r\n              <div className=\"cartPage__productInfo\">\r\n                <h3>{item.name}</h3>\r\n                <p>₹{item.price}</p>\r\n                <div className=\"cartPage__productQuantity\">\r\n                  <label>Quantity:</label>\r\n                  <input type=\"number\" value={item.count} readOnly />\r\n                </div>\r\n                <button onClick={() => removeFromCart(item.id)}>Remove</button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"cartPage__right\">\r\n        <div className=\"cartPage__summary\">\r\n          <h3>Price Summary</h3>\r\n          <p>Total Price: ₹{totalPrice}</p>\r\n          <button onClick={clearCart}>Clear Cart</button>\r\n          <button>Proceed to Checkout</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;"
        }
    ]
}
{
    "sourceFile": "frontend/src/context/CartContext.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748243304862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748243891809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,26 +17,18 @@\n     } catch (err) {\r\n       console.error('Failed to fetch cart:', err);\r\n     }\r\n   };\r\n-\r\n-  const addToCart = async (productId) => {\r\n+  const addToCart = async ({ productId, quantity }) => {\r\n     try {\r\n-      const token = localStorage.getItem('token');\r\n-      const res = await axios.post(\r\n-        '/api/cart/add',\r\n-        { productId, count: 1 },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-      await fetchCart(); // update cart after add\r\n+      const res = await axios.post('/api/cart/add', { productId, quantity }, {\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n+      });\r\n+    // handle response\r\n     } catch (err) {\r\n-      console.error('Add to cart failed:', err);\r\n+      console.error(\"Error adding to cart\", err);\r\n     }\r\n-  };\r\n+};\r\n \r\n   const removeFromCart = async (productId) => {\r\n     try {\r\n       const token = localStorage.getItem('token');\r\n"
                },
                {
                    "date": 1748244515894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,18 +17,24 @@\n     } catch (err) {\r\n       console.error('Failed to fetch cart:', err);\r\n     }\r\n   };\r\n+\r\n   const addToCart = async ({ productId, quantity }) => {\r\n     try {\r\n-      const res = await axios.post('/api/cart/add', { productId, quantity }, {\r\n-        headers: { Authorization: `Bearer ${token}` },\r\n-      });\r\n-    // handle response\r\n+      const token = localStorage.getItem('token'); // ✅ Fixed: Added token definition\r\n+      const res = await axios.post(\r\n+        '/api/cart/add',\r\n+        { productId, quantity },\r\n+        {\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n+        }\r\n+      );\r\n+      fetchCart(); // Optional: Refresh cart after adding\r\n     } catch (err) {\r\n-      console.error(\"Error adding to cart\", err);\r\n+      console.error('Error adding to cart', err);\r\n     }\r\n-};\r\n+  };\r\n \r\n   const removeFromCart = async (productId) => {\r\n     try {\r\n       const token = localStorage.getItem('token');\r\n@@ -61,9 +67,11 @@\n     fetchCart();\r\n   }, []);\r\n \r\n   return (\r\n-    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, clearCart }}>\r\n+    <CartContext.Provider\r\n+      value={{ cartItems, addToCart, removeFromCart, clearCart }}\r\n+    >\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748244724995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,23 @@\n-import { createContext, useContext, useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n+import { createContext, useContext, useState } from 'react';\r\n \r\n const CartContext = createContext();\r\n+\r\n export const useCart = () => useContext(CartContext);\r\n \r\n export const CartProvider = ({ children }) => {\r\n   const [cartItems, setCartItems] = useState([]);\r\n \r\n-  const fetchCart = async () => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const res = await axios.get('/api/cart', {\r\n-        headers: { Authorization: `Bearer ${token}` },\r\n-      });\r\n-      setCartItems(res.data.cart);\r\n-    } catch (err) {\r\n-      console.error('Failed to fetch cart:', err);\r\n-    }\r\n+  const addToCart = (product) => {\r\n+    setCartItems((prevItems) => [...prevItems, product]);\r\n   };\r\n \r\n-  const addToCart = async ({ productId, quantity }) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token'); // ✅ Fixed: Added token definition\r\n-      const res = await axios.post(\r\n-        '/api/cart/add',\r\n-        { productId, quantity },\r\n-        {\r\n-          headers: { Authorization: `Bearer ${token}` },\r\n-        }\r\n-      );\r\n-      fetchCart(); // Optional: Refresh cart after adding\r\n-    } catch (err) {\r\n-      console.error('Error adding to cart', err);\r\n-    }\r\n+  const removeFromCart = (productId) => {\r\n+    setCartItems((prevItems) => prevItems.filter(item => item.id !== productId));\r\n   };\r\n \r\n-  const removeFromCart = async (productId) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      await axios.delete(`/api/cart/remove/${productId}`, {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      });\r\n-      await fetchCart(); // update cart after remove\r\n-    } catch (err) {\r\n-      console.error('Remove from cart failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const clearCart = async () => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      await axios.delete(`/api/cart/clear`, {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      });\r\n-      setCartItems([]);\r\n-    } catch (err) {\r\n-      console.error('Clear cart failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    fetchCart();\r\n-  }, []);\r\n-\r\n   return (\r\n-    <CartContext.Provider\r\n-      value={{ cartItems, addToCart, removeFromCart, clearCart }}\r\n-    >\r\n+    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748243304862,
            "name": "Commit-0",
            "content": "import { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CartContext = createContext();\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  const fetchCart = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const res = await axios.get('/api/cart', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setCartItems(res.data.cart);\r\n    } catch (err) {\r\n      console.error('Failed to fetch cart:', err);\r\n    }\r\n  };\r\n\r\n  const addToCart = async (productId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const res = await axios.post(\r\n        '/api/cart/add',\r\n        { productId, count: 1 },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      await fetchCart(); // update cart after add\r\n    } catch (err) {\r\n      console.error('Add to cart failed:', err);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = async (productId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.delete(`/api/cart/remove/${productId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      await fetchCart(); // update cart after remove\r\n    } catch (err) {\r\n      console.error('Remove from cart failed:', err);\r\n    }\r\n  };\r\n\r\n  const clearCart = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.delete(`/api/cart/clear`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setCartItems([]);\r\n    } catch (err) {\r\n      console.error('Clear cart failed:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCart();\r\n  }, []);\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, clearCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};"
        }
    ]
}